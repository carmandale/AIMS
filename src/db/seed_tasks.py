"""Seed data for task templates"""

import asyncio
import logging
from datetime import datetime
from sqlalchemy.orm import Session

from src.db.session import SessionLocal, init_db
from src.db.models import TaskTemplate
from src.services.tasks import TaskService

logger = logging.getLogger(__name__)

# Sample task templates based on PRD appendix
SAMPLE_TEMPLATES = [
    # Daily preparation tasks (non-blocking)
    {
        "name": "Morning Review: Check signals",
        "description": "Review overnight market movements and check for any trading signals from your systems",
        "rrule": "RRULE:FREQ=DAILY;BYDAY=MO,TU,WE,TH,FR;BYHOUR=8;BYMINUTE=0",
        "is_blocking": False,
        "category": "daily",
        "priority": 1,
        "estimated_duration": 15,
    },
    {
        "name": "Update trading journal",
        "description": "Record any trades executed and document reasoning",
        "rrule": "RRULE:FREQ=DAILY;BYDAY=MO,TU,WE,TH,FR;BYHOUR=16;BYMINUTE=0",
        "is_blocking": False,
        "category": "daily",
        "priority": 2,
        "estimated_duration": 10,
    },
    {
        "name": "Check portfolio risk metrics",
        "description": "Review position sizes, sector exposure, and overall portfolio risk",
        "rrule": "RRULE:FREQ=DAILY;BYDAY=MO,TU,WE,TH,FR;BYHOUR=9;BYMINUTE=30",
        "is_blocking": False,
        "category": "daily",
        "priority": 1,
        "estimated_duration": 10,
    },
    # Weekly blocking tasks
    {
        "name": "Review portfolio drift",
        "description": "Analyze portfolio drift from target allocations and identify rebalancing needs",
        "rrule": "RRULE:FREQ=WEEKLY;BYDAY=FR;BYHOUR=14;BYMINUTE=0",
        "is_blocking": True,
        "category": "weekly",
        "priority": 1,
        "estimated_duration": 30,
    },
    {
        "name": "Approve trade ticket",
        "description": "Review and approve the weekly trade ticket generated by the system",
        "rrule": "RRULE:FREQ=WEEKLY;BYDAY=FR;BYHOUR=15;BYMINUTE=0",
        "is_blocking": True,
        "category": "weekly",
        "priority": 1,
        "estimated_duration": 20,
    },
    {
        "name": "Complete weekly review",
        "description": "Document weekly performance, lessons learned, and adjustments for next week",
        "rrule": "RRULE:FREQ=WEEKLY;BYDAY=FR;BYHOUR=16;BYMINUTE=0",
        "is_blocking": True,
        "category": "weekly",
        "priority": 1,
        "estimated_duration": 45,
    },
    # Weekly non-blocking tasks
    {
        "name": "Review watchlist",
        "description": "Update watchlist with new opportunities and remove stale entries",
        "rrule": "RRULE:FREQ=WEEKLY;BYDAY=SU;BYHOUR=10;BYMINUTE=0",
        "is_blocking": False,
        "category": "weekly",
        "priority": 2,
        "estimated_duration": 30,
    },
    {
        "name": "Analyze sector rotations",
        "description": "Review sector performance and identify rotation opportunities",
        "rrule": "RRULE:FREQ=WEEKLY;BYDAY=SU;BYHOUR=11;BYMINUTE=0",
        "is_blocking": False,
        "category": "weekly",
        "priority": 3,
        "estimated_duration": 25,
    },
    # Monthly tasks
    {
        "name": "Portfolio deep dive",
        "description": "Comprehensive portfolio analysis including performance attribution and risk analysis",
        "rrule": "RRULE:FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=9;BYMINUTE=0",
        "is_blocking": False,
        "category": "monthly",
        "priority": 1,
        "estimated_duration": 120,
    },
    {
        "name": "Update investment thesis",
        "description": "Review and update investment thesis for all holdings",
        "rrule": "RRULE:FREQ=MONTHLY;BYMONTHDAY=15;BYHOUR=10;BYMINUTE=0",
        "is_blocking": False,
        "category": "monthly",
        "priority": 2,
        "estimated_duration": 90,
    },
]


async def seed_task_templates(db: Session):
    """Seed the database with sample task templates"""
    task_service = TaskService()
    created_count = 0

    for template_data in SAMPLE_TEMPLATES:
        try:
            # Check if template already exists
            existing = (
                db.query(TaskTemplate).filter(TaskTemplate.name == template_data["name"]).first()
            )

            if not existing:
                template = await task_service.create_task_template(
                    db,
                    name=str(template_data["name"]),
                    description=str(template_data["description"]),
                    rrule=str(template_data["rrule"]),
                    is_blocking=bool(template_data["is_blocking"]),
                    category=str(template_data["category"]),
                    priority=int(template_data["priority"]),
                    estimated_duration=int(template_data["estimated_duration"])
                    if template_data.get("estimated_duration")
                    else None,
                )
                created_count += 1
                logger.info(f"Created task template: {template.name}")
            else:
                logger.info(f"Task template already exists: {template_data['name']}")

        except Exception as e:
            logger.error(f"Failed to create template '{template_data['name']}': {e}")

    logger.info(f"Seeding complete. Created {created_count} new task templates.")

    # Generate initial task instances for the next week
    try:
        from datetime import date, timedelta

        start_date = date.today()
        end_date = start_date + timedelta(days=7)

        instances = await task_service.generate_task_instances(db, start_date, end_date)
        logger.info(f"Generated {len(instances)} task instances for the next week")
    except Exception as e:
        logger.error(f"Failed to generate initial task instances: {e}")


async def main():
    """Main function to run the seeding script"""
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )

    # Initialize database
    init_db()

    # Run seeding
    db = SessionLocal()
    try:
        await seed_task_templates(db)
    finally:
        db.close()


if __name__ == "__main__":
    asyncio.run(main())
